@page "/login"
@using InventoryManager.Application.Services;
@using InventoryManager.Domain.Entities;
@using InventoryManager.Views.Authentication;
@inject IJSRuntime js
@inject UserService UserService
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<h2>Componente de Login</h2>
<EditForm Model="user">
    <div class="form-group">
        <label>UserName</label>
        <InputText @bind-Value="user.UserName" class="form-control"></InputText>
    </div>
    <div class="form-group">
        <label>Password:</label>
        <InputText @bind-Value="user.Password" class="form-control"></InputText>
    </div>
        <button type="button" class="btn btn-success button-save" @onclick="Authenticate">Login</button>
</EditForm>

@code {
   
    private User user = new ();

    /// <summary>
    /// Validate user authentication state by entrance to the app.
    /// </summary>
    private async Task Authenticate()
    {
        var userAccount = UserService.GetUserByUserName(user.UserName);
        
        if (userAccount == null || userAccount.Password != user.Password)
        {
            await js.InvokeVoidAsync("alert", "Invalid UserName or Password");
            return;
        }
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
        {
                UserName = userAccount.UserName,
                Role = userAccount.Role
        });
        navManager.NavigateTo("/", true);
    }
}
