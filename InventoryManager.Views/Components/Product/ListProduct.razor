@using InventoryManager.Application.Services
@using InventoryManager.Domain.Entities

<AuthorizeView>
     <NotAuthorized>
          <InfoAlertProduct></InfoAlertProduct>
     </NotAuthorized>
</AuthorizeView>
<div class="container m-0 pt-3 pb-3">
    <div class="row">
        <AuthorizeView Roles="Administrator">
            <Authorized>
            <div class="col-4 container-button-add">
                    <button type="button" class="button btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal">
                        Make transaction
                    </button>
                    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">            
                       
                    </div>
            </div>
                <div class="col-4 container-button-add">
                    <button type="button" class="button btn btn-success" data-bs-toggle="modal" data-bs-target="#exampleModal">
                        Add product
                    </button>
                    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                        <CreateProduct></CreateProduct>
                    </div>
                </div>
            </Authorized>
        </AuthorizeView>
        <div class="col-4 p-0">
            <select class="form-select" @onchange="@CategoryChanged">
                <option value="">Select a category</option>
                @foreach (var category in _categories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </select>
        </div>
    </div>
</div>

<table class="table table-hover table-bordered main-table-products">
    <thead>
        <tr>
            <th>Reference</th>
            <th>Name</th>
            <th>Description</th>
            <th>Quantity</th>
            <th>Category</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in _temporalProducts)
        {
            <tr>
                <td>@product.Id</td>
                <td>@product.Name</td>
                <td>@product.Description</td>
                <td>@product.TotalQuantity</td>
                <td>@product.Category!.Name</td>
            </tr>
        }
    </tbody>
</table>


@inject ProductService ProductService
@inject CategoryService CategoryService;

@code {

    private List<Product> _products = new();
    //Para cargar temporalmente los productos
    private List<Product> _temporalProducts = new();
    public List<Category> _categories = new();

    protected override async Task OnInitializedAsync()
    {
        //Se traen productos y categorias
        _products = await ProductService.ItemList();
        _temporalProducts = _products;
        _categories = await CategoryService.ItemList();
    }

    //ChangeEventArgs me trae el valor del evento que captura el formulario
    private void CategoryChanged(ChangeEventArgs e)
    {
        _temporalProducts = _products.Where(p => p.CategoryId == e.Value!.ToString()).ToList();
    }

}