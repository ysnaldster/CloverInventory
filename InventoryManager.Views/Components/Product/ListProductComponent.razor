@using InventoryManager.Application.Services
@using InventoryManager.Domain.Entities
@inject ProductService ProductService
@inject CategoryService CategoryService;


<div class="container-fluid m-0 pt-3 pb-3">
    <div class="row list-products-sub-container">
        <h1 class="p-0">Available products</h1>
        <AuthorizeView Roles="Administrator">
            <Authorized>
            <div class="col-4 p-0">
                    <button type="button" class="button btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal">
                        Make transaction
                    </button>
                    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">            
                       
                    </div>
            </div>
                <div class="col-4">
                    <button type="button" class="button btn btn-success" data-bs-toggle="modal" data-bs-target="#exampleModal">
                        Add product
                    </button>
                    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                        <CreateProductComponent></CreateProductComponent>
                    </div>
                </div>
            </Authorized>
            <NotAuthorized>
                <InfoAlertProductComponent></InfoAlertProductComponent>
            </NotAuthorized>
        </AuthorizeView>
        <div class="col-4 pb-4 pe-0 ps-0">
            <button @onclick="@OnInitializedAsync">
                Refresh
            </button>
            <select class="form-select" @onchange="@CategoryChanged">
                <option value="">Select a category</option>
                @foreach (var category in _categories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </select>
        </div>
    </div>
    <div class="row list-products-sub-container">
        <table class="table table-hover table-bordered">
            <thead>
                <tr>
                    <th>Actions</th>
                    <th>Reference</th>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Quantity</th>
                    <th>Category</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in _temporalProducts)
                {
                    <tr>
                        <td>
                            <AuthorizeView>
                                <Authorized>
                                    <a href="/product/edit/@product.Id">Edit</a>
                                </Authorized>
                                <NotAuthorized>
                                    NoAutorizado
                                </NotAuthorized>
                            </AuthorizeView>
                        </td>
                        <td>@product.Id</td>
                        <td>@product.Name</td>
                        <td>@product.Description</td>
                        <td>@product.TotalQuantity</td>
                        <td>@product.Category!.Name</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {


    private List<Product> _products = new();
    private List<Product> _temporalProducts = new();
    public List<Category> _categories = new();

    /// <summary>
    /// Initialized for get products and categories list.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        _products = await ProductService.ItemList();
        _temporalProducts = _products;
        _categories = await CategoryService.ItemList();
    }

    //ChangeEventArgs me trae el valor del evento que captura el formulario
    private void CategoryChanged(ChangeEventArgs e)
    {
        _temporalProducts = _products.Where(p => p.CategoryId.ToString() == e.Value!.ToString()).ToList();
    }

}