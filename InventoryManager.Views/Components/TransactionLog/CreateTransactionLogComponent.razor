@using InventoryManager.Application.Services
@using InventoryManager.Domain.Entities


<div class="list-products-action-container">
    <div class="container-fluid card list-products-action-form mt-5 p-5">
        <div class="row">
            <div class="col-12">
                <div class="form-control">
                <h2>Make transaction</h2>
                    <label>Warehouse</label>
                    <select class="form-control" @onchange="OnChangedWarehouse">
                        <option values="">Select a warehouse</option>
                        @foreach (var warehouse in _warehouses)
                        {
                            <option value="@warehouse.Id">@warehouse.Name</option>
                        }
                    </select>
                </div>
                <EditForm Model="_transactionLog">
                    <div class="form-control">
                        <label>Product (First select a warehouse)</label>
                        <InputSelect class="form-control" @bind-Value="_transactionLog.StorageId">
                            <option>Select a product</option>
                            @foreach (var storage in _storages)
                            {
                                <option value="@storage.Id">@storage.Product!.Name</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="form-control">
                        <label>Write quantity</label>
                        <InputNumber class="form-control" @bind-Value="_transactionLog.Quantity"></InputNumber>
                    </div>
                    <div class="form-group">
                        <label>Is a input?</label>
                        <InputCheckbox class="form-control" @bind-Value="_transactionLog.IsInput"/>
                    </div>
                    <div class="mt-3 registry-transactions-buttons-container">
                        <a class="button btn btn-primary me-3" value="Cancelar" href="/product">Cancelar</a>
                        <input type="button" value="@ButtonValue" class="form-control button btn btn-success" @onclick="@SaveTransactionLog" />
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@inject WarehouseService WarehouseService;
@inject StorageService StorageService;
@inject ProductService ProductService;
@code {

    private TransactionLog _transactionLog = new();
    private List<Warehouse> _warehouses = new();
    private List<Storage> _storages = new();
    private Product _product = new();
    private Storage _storage = new();

    string ButtonValue => _transactionLog.IsInput ? "Registry Input" : "Registry Output";
    string Message;

    protected override async Task OnInitializedAsync()
    {
        _warehouses = await WarehouseService.ItemList();
    }

    private async Task OnChangedWarehouse(ChangeEventArgs e)
    {
        var warehouseId = e.Value!.ToString();
        _storages = await StorageService.StorageProductsByWarehouse(Int32.Parse(warehouseId));
    }

    private async Task SaveTransactionLog()
    {
        _storage = _storages.LastOrDefault(s => s.Id == _transactionLog.StorageId)!;
        _product = _storage.Product!;

        if (_transactionLog.IsInput)
        {
            _storage.PartialQuantity += _transactionLog.Quantity;
            await StorageService.UpdateItem(_storage);

            _product.TotalQuantity += _transactionLog.Quantity;
            await ProductService.UpdateItem(_product);
            Message = $"Product {_product.Name} was updated success";
        }
        else
        {
            if (IsBiggerThanZero(_transactionLog.Quantity, _storage!.PartialQuantity!.Value))
            {
                _storage.PartialQuantity -= _transactionLog.Quantity;
                await StorageService.UpdateItem(_storage);

                _product.TotalQuantity -= _transactionLog.Quantity;
                await ProductService.UpdateItem(_product);
                Message = $"Product {_product.Name} was updated success";
            }
            else
            {
                Message = "Quantity doesn't exist in warehouse for the product";
            }
        }
    }

    private bool IsBiggerThanZero(int quantity, int storageQuantity)
    {
        if (storageQuantity > quantity)
        {
            return true;
        }
        return false;
    }
}